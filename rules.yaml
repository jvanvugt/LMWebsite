functions:
  ### PREDICATES ###

  # Authentication
  - loggedIn(): auth.uid !== null
  - isJudge(user_id): root.users[user_id].roles.judge === true
  - isAdmin(user_id): root.users[user_id].roles.admin === true
  - isStaff(user_id): isJudge(user_id) || isAdmin(user_id)

  # Existence Checks
  - isSociety(society_id): root.static.societies[society_id].exists()
  - isTeam(team_id): root.teams[team_id].exists()
  - isCity(city_id): root.cities[city_id].exists()
  - isEventType(event_type): root.static.event_types[event_type].exists()

  # Basic Properties
  - isNotEmpty(string): string.length > 0
  - del(next): next.exists() === false

  # Data Validation
  - validTaskRepeated(repeated): taskOfRepeated(repeated).rankable === true && repeated <= 1 || repeated <= taskOfRepeated(repeated).repeatable

  ### NON-PREDICATES ###

  # Data Retrieval
  - taskOfRepeated(repeated): repeated.parent().parent()

schema:
  additionalProperties: false
  properties:
    teams:
      ~$team_id:
        type: object
        required: [name, judge, active]
        additionalProperties: false
        properties:
          name: {type: string}
          judge: {constraint: isJudge(next.val())}
          active: {type: boolean}
    users:
      ~$user_id:
        type: object
        required: [name, phone, mail]
        additionalProperties: false
        properties:
          name:
            type: string
            constraint: isNotEmpty(next.val())
          phone:
            type: string
            constraint: isNotEmpty(next.val())
          smartphone: {type: boolean}
          mail:
            type: string
            constraint: isNotEmpty(next.val())
          society: {constraint: isSociety(next.val())}
          team: {constraint: true || del(next) || isTeam(next.val())} # 'true' hack to fix roles...
          roles:
            additionalProperties: false
            properties:
              judge: {type: boolean}
              admin: {type: boolean}
    cities:
      ~$city_id:
        type: object
        required: [name]
        additionalProperties: false
        properties:
          name:
            type: string
            constraint: isNotEmpty(next.val())
    streets:
      ~$street_id:
        type: object
        required: [name, city_id]
        additionalProperties: false
        properties:
          name:
            type: string
            constraint: isNotEmpty(next.val())
          city_id:
            type: string
            constraint: isCity(next.val())
          location:
            type: object
            properties:
              additionalProperties: false
              lat: {type: number}
              lon: {type: number}
          hotel_team_id: {constraint: del(next) || isTeam(next.val())}
          hotel_timestamp: {type: number}
          visited:
            ~$team_id:
              type: number # timestamp
              constraint: isTeam($team_id)
    tasks:
      ~$task_id:
        type: object
        required: [name, rewards]
        additionalProperties: false
        properties:
          name:
            type: string
            constraint: isNotEmpty(next.val())
          repeatable:
            type: number
            minimum: 1
          rankable: {type: boolean}
          rewards: {~$rank: {type: number}} # rewards by rank
          repeated:
            ~$team_id:
              type: number
              minimum: 0
              constraint: isTeam($team_id) && validTaskRepeated(next)
          ranked: {~$team_id: {constraint: isTeam($team_id)}} # ranking value can be anything
    cards:
      ~$card_id:
        type: object
        required: [name, amount]
        additionalProperties: false
        properties:
          name:
            type: string
            constraint: isNotEmpty(next.val())
          amount: {type: number}
          is_positive: {type: boolean}
          received:
            ~$team_id:
              type: number # timestamp
              constraint: isTeam($team_id)
          completed:
            ~$team_id:
              type: number # timestamp
              constraint: isTeam($team_id)
    events:
      ~$event_id:
        type: object
        required: [team, type, timestamp, active]
        additionalProperties: false
        properties:
          team: {constraint: isTeam(next.val())}
          type: {constraint: isEventType(next.val())}
          timestamp: {type: number}
          undo: {type: boolean}
          active: {type: boolean}
          data: {} # TODO: exactly the keys from static.event_types
    static:
      additionalProperties: false
      properties:
        constants: {~$constant: {type: number}}
        event_types:
          ~$event_type:
            $event_property:
              type: boolean
        societies:
          ~$society_id:
            type: object
            required: [name]
            additionalProperties: false
            properties:
              name:
                type: string
                constraint: isNotEmpty(next.val())
        game_over: {type: boolean}

access:
  - location: /
    read: isStaff(auth.uid)
    write: isStaff(auth.uid)
  - location: static/
    read: true
  - location: users/$user_id/
    read: isStaff(auth.uid) || $user_id === auth.uid
    write: isStaff(auth.uid) || $user_id === auth.uid
